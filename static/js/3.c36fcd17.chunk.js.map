{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/ProfileInfo/ProfileStatus.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Profile/MyPosts/Post/Post.module.scss","components/Profile/MyPosts/AddPostForm.module.scss","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWirhHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","React","Component","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","c","status__text","onDoubleClick","autoFocus","onBlur","UpdateUserStatusThunkCreator","onChange","e","currentTarget","value","ProfileInfo","profile","ProfileInfo__avatar","src","photos","large","logo","ProfileInfo__UserAbout","ProfileInfo__UserName","fullName","ProfileInfo__UserData","UserData__item","aboutMe","lookingForAJob","lookingForAJobDescription","Preloader","Post","PostItem","PostItem__data","PostItem__text","message","PostItem__likeContainer","PostItem__like","like","reduxForm","form","formControl","onSubmit","handleSubmit","Field","formControl__text","component","Textarea","name","placeholder","formControl__btn","MyPosts","memo","items","posts","map","p","key","id","likesCount","formData","addPostCreator","myPosts","reverse","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","userId","this","match","params","authorezedUserId","UserProfileThunkCreator","UserStatusThunkCreator","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.c36fcd17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"ProfileInfo_ProfileInfo__3A0Wl\",\"ProfileInfo__UserAbout\":\"ProfileInfo_ProfileInfo__UserAbout__62vhn\",\"ProfileInfo__UserName\":\"ProfileInfo_ProfileInfo__UserName__LfBFQ\",\"ProfileInfo__avatar\":\"ProfileInfo_ProfileInfo__avatar__3IRXv\",\"ProfileInfo__UserData\":\"ProfileInfo_ProfileInfo__UserData__3sg27\",\"UserData__item\":\"ProfileInfo_UserData__item__2bBN2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status__text\":\"ProfileStatus_status__text__2au_w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1pUmR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PostItem\":\"Post_PostItem__1hzH4\",\"PostItem__data\":\"Post_PostItem__data__1Eo3f\",\"PostItem__text\":\"Post_PostItem__text__wdstO\",\"PostItem__like\":\"Post_PostItem__like__3gSWI\",\"PostItem__likeContainer\":\"Post_PostItem__likeContainer__35Dya\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"AddPostForm_formControl__C3WYf\",\"formControl__text\":\"AddPostForm_formControl__text__2bKD3\",\"formControl__btn\":\"AddPostForm_formControl__btn__3foXd\"};","import React from 'react';\r\n\r\nclass ProfileStatus extends React.Component {\r\n    /*локальный state с приходящими пропсами синхринизируется единожды в самом начале запуска компоненты, когда формируется\r\n    объект на основе классовой компоненты. При последующих\r\n    * перерисовках компоненты локальный state синхронизироваться больше не будет и локальный state может отличаться\r\n    * от глобального state. И если в пропсах статус пришел позже чем\r\n    * профиль, то первое значение статуса(пустая строка) запишется в локальный state, потом, конечно и сам статус придет\r\n    * и компонента перерисуется, но в локальном state останется первый вариант*/\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    };\r\n    activateEditMode = () => {\r\n        this.setState({ //React.Component возьмет этот объект и склеит его с первоначальным state\r\n            editMode: true\r\n        }); //берется из React.Component и перезаписывает элементы которые указаны выше в state\r\n        /* this.forceUpdate(); //для того что бы перерисовать локальный state. Но лучше не использовать*/\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({ //React.Component возьмет этот объект и склеит его с первоначальным state\r\n            editMode: false\r\n        }); //берется из React.Component и перезаписывает элементы которые указаны выше в state\r\n        /* this.forceUpdate(); //для того что бы перерисовать локальный state. Но лучше не использовать*/\r\n        this.props.UpdateUserStatusThunkCreator(this.state.status);\r\n    };\r\n\r\n    onChahangeStatus = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        });\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {//в prevProps, prevState приходят предыдущие значения до момента обновления\r\n        //componentDidUpdate вызывается когда идет перерисовка компоненты извне и приходят новые пропсы, либо перерисовывается когда меняется локальный State\r\n        if (prevProps.status !== this.props.status) { //предыдущий статус- это статус с которым отрисовалась компонента, и если статус пришел после отрисовки, то они будут различаться\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode\r\n                    ? <div>\r\n                        <span\r\n                            onDoubleClick={this.activateEditMode}>{this.props.status || \"type text\"}</span> {/*надо следать .bind(this) иначе this будет ссылаться на onDoubleClick*/}\r\n                    </div>\r\n                    : <div>\r\n                        <input onChange={this.onChahangeStatus} autoFocus={true} onBlur={this.deactivateEditMode}\r\n                               value={this.state.status}/> {/*onBlur работает на фокус*/}\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default ProfileStatus;","import React, {useState, useEffect} from 'react';\r\nimport c from './ProfileStatus.module.scss';\r\n/*useState возвращает массив. В массиве 1 элементом сидит само значение(т.е. false),\r\n* вторым элементом в массиве будет функция, которая меняет значение\r\n* let stateWithSetState = useState(false); -useState изначально по умолчанию будет равен false\r\n    let editMode = stateWithSetState[0];\r\n    let setEditMode = stateWithSetState[1];\r\n    но так никто не пишет, лучше пользоваться деструктуризацией\r\n    let [editMode, setEditMode] = useState(false); в первую перем пишется значение, во вторую перем. функция\r\n   */\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false); //в useState данные попадают при первом рендере, потом попадать не будут\r\n    let [status, setStatus] = useState(props.status);\r\n    //если статус в пропсах придет позже чем профиль, то будет так же как и с классовыми компонентами. Запишется пустая строка\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n    /*[] означает что useEffect надо запускать не всегда а только в момент после самого 1 вмонтирования, но это не сработает\r\n    * если нужные мне пропсы не придут к концу первого рендера, поэтому [] не должен быть пустым, там должна быть зависомость\r\n    * если props.status при очередной отрисовке будет не таким каким он был раньшене запустится useEffect т.е если props.status\r\n    * при очередной отрисовке будет не такой, какой он был раньше, запустится useEffect*/\r\n    /*useEffect - это такой хук, который говорит закиньте в меня функцию (в самой простой реализации), которую он\r\n    выполнит когда произойдет уже отрисовка*/\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.UpdateUserStatusThunkCreator(status);\r\n    };\r\n\r\n    const onChangeStatus = (e) => {\r\n        setStatus( e.currentTarget.value)\r\n    };\r\n\r\n   /* первая отрисовка произошла после того как в editMode вернулся false, и компонента отрисовалась со значением false\r\n   * вторая отрисовка будет после того как выполнится функция setEditMode(true) и компонента отрисуется со зданчением true*/\r\n\r\n    return (\r\n        <div className={c.status}>\r\n            { !editMode &&\r\n            <div >\r\n                <span className={c.status__text}  onDoubleClick={activateEditMode}> {props.status || \"type text\"} </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true} onBlur={deactivateEditMode} onChange={onChangeStatus} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport c from './ProfileInfo.module.scss';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWirhHooks\";\r\nimport logo from \"../../../assets/images/user.png\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {  //если вдруг в пропсах профиля нет, то возв Preloafer\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={c.ProfileInfo}>\r\n            <div className={c.ProfileInfo__avatar}>\r\n                <img src={props.profile.photos.large\r\n                    ? props.profile.photos.large\r\n                    : logo}/>\r\n            </div>\r\n            <div className={c.ProfileInfo__UserAbout}>\r\n                <div className={c.ProfileInfo__UserName}>\r\n                    {props.profile.fullName}\r\n                </div>\r\n                <div className={c.ProfileInfo__UserData}>\r\n                    <ProfileStatusWithHooks status={props.status}\r\n                                            UpdateUserStatusThunkCreator={props.UpdateUserStatusThunkCreator}/>\r\n                </div>\r\n                <div className={c.ProfileInfo__UserData}>\r\n                    <span className={c.UserData__item}>About:</span> {props.profile.aboutMe\r\n                    ? props.profile.aboutMe\r\n                    : \"no data\"}\r\n                </div>\r\n                <div className={c.ProfileInfo__UserData}>\r\n                    <span className={c.UserData__item}>Look for a job:</span> {props.profile.lookingForAJob\r\n                    ? \"yes\"\r\n                    : \"no\"}\r\n                </div>\r\n                <div className={c.ProfileInfo__UserData}>\r\n                    <span className={c.UserData__item}>Description:</span> {props.profile.lookingForAJobDescription\r\n                    ? props.profile.lookingForAJobDescription\r\n                    : \"no data\"}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport c from './Post.module.scss';\r\nimport logo from \"../../../../assets/images/user.png\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={c.PostItem}>\r\n            <img src={logo}/>\r\n            <div className={c.PostItem__data}>\r\n                <div className={c.PostItem__text}>{props.message}</div>\r\n                <div className={c.PostItem__likeContainer}>like\r\n                    <span className={c.PostItem__like}>{props.like}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requireField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport c from './AddPostForm.module.scss';\r\n\r\n//const maxLength10 = maxLengthCreator(30);\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form className={c.formControl} onSubmit={props.handleSubmit}>\r\n            <Field className={c.formControl__text} component={Textarea} name={\"newPostText\"}\r\n                   placeholder=\"Enter your post\"/>\r\n            <button className={c.formControl__btn}>Add post</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm({form: \"profileAddNewPostForm\"})(AddPostForm);","import React from 'react';\r\nimport c from './MyPosts.module.scss';\r\nimport Post from './Post/Post';\r\nimport AddPostFormReduxForm from \"./AddPostForm\";\r\n\r\n/*Для того что бы компонента не обновлялась когда не нужно (проблему описал в Profile) нужно сделать:\r\n* Если компонента классовая:\r\n*   1) shouldComponentUpdate(nextProps, nexState) {\r\n*       return nextProps != this.props || nexState != this.nexState}\r\n*           толлко что пришедшие пропсы не равны пропсам которые были до этого, или новое состояние != состоянию до этого\r\n*   2) import React, {PureComponent} from 'react';\r\n*       class MyPosts extends React.PureComponent\r\n*           PureComponent уже автоматим учитывает shouldComponentUpdate и его писать не надо\r\n* Если компонента функциональная:\r\n*   const MyPosts = React.memo((props) => {}) наподобие хока*/\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    let items = props.posts.map(p => (\r\n        <Post message={p.message} key={p.id} like={p.likesCount}/>)\r\n    );\r\n    const onSubmit = (formData) => {  //сюда придут все значения из формы\r\n        props.addPostCreator(formData);\r\n    };\r\n    return (\r\n        <div>\r\n            <AddPostFormReduxForm onSubmit={onSubmit}/>\r\n            <div className={c.myPosts}>\r\n                {items.reverse()}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostCreator} from \"../../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {posts:state.profilePage.posts}\r\n };\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {addPostCreator})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react'; // импортируем модуль из node modules без ./ он добавл во все файлы\r\nimport c from './Profile.module.scss';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status}\r\n                         UpdateUserStatusThunkCreator={props.UpdateUserStatusThunkCreator}/>\r\n            <MyPostsContainer/>\r\n            {/*MyPostsContainer будет каждый раз перерисовываться без нужной на то причины только из за того,что  в\r\n            ProfileContainer приходт новые пропсы и эта компонента перерисовывается, а так как MyPostsContainer сидит в\r\n            ProfileContainer то и она тоже перерисуется, хотя в нее пропсы даже не приходят*/}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile; // экспортируем код в другие файлы default экспортирует все.","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    UpdateUserStatusThunkCreator,\r\n    UserProfileThunkCreator,\r\n    UserStatusThunkCreator\r\n} from \"../../Redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorezedUserId;\r\n        }\r\n        /*мы делаем 2 запроса, один на профиль, другой на статус\r\n        * и они каждый раз отрабатывают по разному. Кто то быстрее, кто то медленнее\r\n        * а компонента profile не показывается (включается preloader) пока, туда не придет пропс с  profile\r\n        * и пока пропс профиль не пришел, а пропс со статусом пришел, то все отображается хорошо, статус успел придти\r\n        * ели же в припсы приходит первый profile, то компонента начинает редрерится без пропсов статус*/\r\n        this.props.UserProfileThunkCreator(userId);\r\n        this.props.UserStatusThunkCreator(userId);\r\n        /*setTimeout(() => {this.props.UserStatusThunkCreator(userId);}, 1000)*/\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                        UpdateUserStatusThunkCreator={this.props.UpdateUserStatusThunkCreator}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorezedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {UserProfileThunkCreator, UserStatusThunkCreator, UpdateUserStatusThunkCreator}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}