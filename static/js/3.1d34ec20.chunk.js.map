{"version":3,"sources":["styles/ProfileInfo.module.scss","styles/ProfileStatus.module.scss","styles/MyPosts.module.scss","styles/Post.module.scss","styles/AddPostForm.module.scss","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","props","status","UpdateUserStatus","useState","editMode","setEditMode","newStatus","setStatus","useEffect","className","c","status__text","onDoubleClick","autoFocus","onBlur","onChange","e","currentTarget","value","reduxForm","form","profile","error","onSubmit","handleSubmit","Field","component","type","name","placeholder","Object","keys","contacts","map","contact","key","style","color","ProfileData","aboutMe","lookingForAJob","lookingForAJobDescription","isOwner","contactsItems","contactTitle","contactValue","onClick","styles","ProfileInfo__UserData","UserData__item","length","Contact","ProfileInfo","Preloader","large","photos","savePhoto","updateProfile","ProfileInfo__avatar","src","logo","alt","accept","target","files","id","ProfileInfo__loadPhoto","htmlFor","ProfileInfo__UserAbout","ProfileInfo__UserName","fullName","initialValues","formData","then","Post","PostItem","PostItem__data","PostItem__text","message","PostItem__likeContainer","PostItem__like","like","formControl","formControl__text","Textarea","formControl__btn","MyPosts","React","memo","items","posts","p","likesCount","addPostCreator","myPosts","reverse","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","UserProfile","UserStatus","refreshProfile","prevProps","prevState","snapshot","SavePhoto","UpdateProfile","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.1d34ec20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"ProfileInfo_ProfileInfo__2gCZd\",\"ProfileInfo__UserAbout\":\"ProfileInfo_ProfileInfo__UserAbout__KMu1I\",\"ProfileInfo__UserName\":\"ProfileInfo_ProfileInfo__UserName__2v6nf\",\"ProfileInfo__avatar\":\"ProfileInfo_ProfileInfo__avatar__1wIkz\",\"ProfileInfo__loadPhoto\":\"ProfileInfo_ProfileInfo__loadPhoto__3y9oD\",\"ProfileInfo__UserData\":\"ProfileInfo_ProfileInfo__UserData__1YUd7\",\"UserData__item\":\"ProfileInfo_UserData__item__2lXBm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status__text\":\"ProfileStatus_status__text__2IHrY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__3cs7I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PostItem\":\"Post_PostItem__1aZpr\",\"PostItem__data\":\"Post_PostItem__data__2Ah3_\",\"PostItem__text\":\"Post_PostItem__text__3beIn\",\"PostItem__like\":\"Post_PostItem__like__J4JM-\",\"PostItem__likeContainer\":\"Post_PostItem__likeContainer__1NSQr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"AddPostForm_formControl__3sMpH\",\"formControl__text\":\"AddPostForm_formControl__text__24afE\",\"formControl__btn\":\"AddPostForm_formControl__btn__1RYsh\"};","import React, {useState, useEffect} from 'react';\r\nimport c from '../../../styles/ProfileStatus.module.scss';\r\n\r\nconst ProfileStatus = (props) => {\r\n\r\n    const {status} = props;\r\n    const {UpdateUserStatus} = props;\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [newStatus, setStatus] = useState(status);\r\n\r\n    useEffect(() => {\r\n        setStatus(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        UpdateUserStatus(newStatus);\r\n    };\r\n\r\n    const onChangeStatus = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div className={c.status}>\r\n            {!editMode &&\r\n            <div>\r\n                <span className={c.status__text} onDoubleClick={activateEditMode}> {status || \"type text\"} </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true} onBlur={deactivateEditMode} onChange={onChangeStatus} value={newStatus}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\nconst ProfileDataForm = (props) => {\r\n\r\n    const {profile, error} = props;\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <span>Full name:</span>\r\n                <Field component={'input'} type={'text'} name={\"fullName\"}\r\n                       placeholder=\"full name\"/>\r\n            </div>\r\n\r\n            <div>\r\n                <span>About:</span>\r\n                <Field component={'textarea'} name={\"aboutMe\"}\r\n                       placeholder=\"about me\"/>\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <span>Looking for a job:</span>\r\n                <Field component={'input'} type={'checkbox'} name={\"lookingForAJob\"}/>\r\n            </div>\r\n\r\n            <div>\r\n                <span>Description:</span>\r\n                <Field component={'textarea'} name={\"lookingForAJobDescription\"}/>\r\n            </div>\r\n\r\n            {Object.keys(profile.contacts).map(contact => (\r\n                    <div key={contact}>\r\n                        <span>{contact}</span>\r\n                        <Field component={'input'} type={'text'} name={\"contacts.\" + contact}/>\r\n                    </div>\r\n                )\r\n            )}\r\n\r\n            <button>save</button>\r\n            {error &&\r\n            <span style={{color: 'red'}}>{error}</span>}\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm({form: \"ProfileDataForm\"})(ProfileDataForm);","import React, {useState} from 'react';\r\nimport styles from '../../../styles/ProfileInfo.module.scss';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport logo from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    let {isOwner, profile, status} = props;\r\n    let {large} = props.profile.photos;\r\n    const {savePhoto, UpdateUserStatus, updateProfile} = props;\r\n\r\n\r\n    const selectPhoto = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData) => {\r\n        updateProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={styles.ProfileInfo}>\r\n\r\n            <div className={styles.ProfileInfo__avatar}>\r\n                <img src={large\r\n                    ? large\r\n                    : logo} alt={\"userPhoto\"}/>\r\n\r\n                {isOwner &&\r\n                <div>\r\n                    <input type=\"file\" accept=\".jpg, .jpeg, .png\" onChange={selectPhoto}\r\n                           name={\"file\"} id={\"file\"} className={styles.ProfileInfo__loadPhoto}/>\r\n                    < label htmlFor=\"file\">Изменить фото</label>\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n            <div className={styles.ProfileInfo__UserAbout}>\r\n\r\n                <div className={styles.ProfileInfo__UserName}>\r\n                    {profile.fullName}\r\n                </div>\r\n\r\n                <div className={styles.ProfileInfo__UserData}>\r\n                    <ProfileStatus status={status}\r\n                                   UpdateUserStatus={UpdateUserStatus}/>\r\n                </div>\r\n\r\n                {!editMode &&\r\n                <ProfileData profile={profile} UpdateUserStatus={UpdateUserStatus} setEditMode={setEditMode}\r\n                             isOwner={isOwner}/>}\r\n\r\n                {editMode && <ProfileDataForm initialValues={profile} profile={profile} setEditMode={setEditMode}\r\n                                              onSubmit={onSubmit}/>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ProfileData = (props) => {\r\n\r\n    let {aboutMe, lookingForAJob, lookingForAJobDescription, contacts} = props.profile;\r\n    const {setEditMode, isOwner} = props;\r\n\r\n    let contactsItems = Object.keys(contacts).map(contact => {\r\n            if (contacts[contact]) {\r\n                return <Contact key={contact} contactTitle={contact}\r\n                                contactValue={contacts[contact]}\r\n                />\r\n            }\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            {isOwner &&\r\n            <div>\r\n                <button onClick={() => {\r\n                    setEditMode(true)\r\n                }}>Редактировать\r\n                </button>\r\n            </div>\r\n            }\r\n\r\n            <div className={styles.ProfileInfo__UserData}>\r\n                <span className={styles.UserData__item}>Обо мне:</span>\r\n                {aboutMe ? aboutMe : \"no data\"}\r\n            </div>\r\n\r\n            <div className={styles.ProfileInfo__UserData}>\r\n                <span className={styles.UserData__item}>Ищу работу:</span>\r\n                {lookingForAJob ? \"Да\" : \"Нет\"}\r\n            </div>\r\n\r\n            <div className={styles.ProfileInfo__UserData}>\r\n                <span className={styles.UserData__item}>Описание:</span>\r\n                {lookingForAJobDescription ? lookingForAJobDescription : \"Нет данных\"}\r\n            </div>\r\n\r\n            {\r\n                contactsItems.length > 0 &&\r\n                <div className={styles.ProfileInfo__UserData}>\r\n                    <span className={styles.UserData__item}>Контакты:</span>\r\n                    {contactsItems}\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nconst Contact = (props) => {\r\n\r\n    const {contactTitle, contactValue} = props;\r\n\r\n    return (\r\n        <div>\r\n            <span>{contactTitle}</span> : <span>{contactValue || \"Нет данных\"}</span>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport c from '../../../../styles/Post.module.scss';\r\nimport logo from \"../../../../assets/images/user.png\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={c.PostItem}>\r\n            <img src={logo}/>\r\n            <div className={c.PostItem__data}>\r\n                <div className={c.PostItem__text}>{props.message}</div>\r\n                <div className={c.PostItem__likeContainer}>like\r\n                    <span className={c.PostItem__like}>{props.like}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requireField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport c from '../../../styles/AddPostForm.module.scss';\r\n\r\n//const maxLength10 = maxLengthCreator(30);\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form className={c.formControl} onSubmit={props.handleSubmit}>\r\n            <Field className={c.formControl__text} component={Textarea} name={\"newPostText\"}\r\n                   placeholder=\"Enter your post\"/>\r\n            <button className={c.formControl__btn}>Add post</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm({form: \"profileAddNewPostForm\"})(AddPostForm);","import React from 'react';\r\nimport c from '../../../styles/MyPosts.module.scss';\r\nimport Post from './Post/Post';\r\nimport AddPostFormReduxForm from \"./AddPostForm\";\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    let items = props.posts.map(p => (\r\n        <Post message={p.message} key={p.id} like={p.likesCount}/>)\r\n    );\r\n    const onSubmit = (formData) => {\r\n        props.addPostCreator(formData);\r\n    };\r\n    return (\r\n        <div>\r\n            <AddPostFormReduxForm onSubmit={onSubmit}/>\r\n            <div className={c.myPosts}>\r\n                {items.reverse()}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","\r\nimport {addPostCreator} from \"../../../Redux/reducers/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {posts:state.profilePage.posts}\r\n };\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {addPostCreator})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport c from '../../styles/Profile.module.scss';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    let {profile, status, isOwner} = props;\r\n    let {UpdateUserStatus, savePhoto, updateProfile} = props;\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile}\r\n                         status={status}\r\n                         UpdateUserStatus={UpdateUserStatus}\r\n                         isOwner={isOwner}\r\n                         savePhoto={savePhoto}\r\n                         updateProfile={updateProfile}/>\r\n\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {SavePhoto, UpdateProfile, UpdateUserStatus, UserProfile, UserStatus} from \"../../Redux/reducers/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n\r\n        this.props.UserProfile(userId);\r\n        this.props.UserStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let userId = this.props.match.params.userId;\r\n        if (userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        UpdateUserStatus={this.props.UpdateUserStatus}\r\n                        isOwner={!this.props.match.params.userId}\r\n                        savePhoto={this.props.SavePhoto}\r\n                        updateProfile={this.props.UpdateProfile}/>\r\n\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {UserProfile, UserStatus, UpdateUserStatus, SavePhoto, UpdateProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}